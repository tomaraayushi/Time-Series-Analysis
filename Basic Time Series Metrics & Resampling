# Basic Time Series Metrics & Resampling

# Compare Time Series Growth Rates
# Import data here
prices = pd.read_csv('asset_classes.csv', parse_dates = ['DATE'],index_col = 'DATE')

# Inspect prices here
print(prices.info())

# Select first prices
first_prices = prices.iloc[0]

# Create normalized
normalized = prices.div(first_prices).mul(100)

# Plot normalized
normalized.plot()
plt.show()

# Comparing stock price with a benchmark
# Import stock prices and index here
stocks = pd.read_csv('nyse.csv', parse_dates = ['date'], index_col = 'date')

dow_jones = pd.read_csv('dow_jones.csv', parse_dates = ['date'], index_col = 'date')

# Concatenate data and inspect result here
data = pd.concat([stocks, dow_jones], axis = 1)
print(data.info())

# Normalize and plot your data here
(data.div(data.iloc[0]).mul(100)).plot()
plt.show()

# Plot performance difference vs benchmark index
# Create tickers
tickers = ['MSFT', 'AAPL']

# Import stock data here
stocks = pd.read_csv('msft_aapl.csv', parse_dates = ['date'], index_col = 'date')

# Import index here
sp500 = pd.read_csv('sp500.csv', parse_dates = ['date'], index_col = 'date')

# Concatenate stocks and index here
data = pd.concat([stocks, sp500], axis = 1).dropna()

# Normalize data
normalized = data.div(data.iloc[0]).mul(100)

# Subtract the normalized index from the normalized stock prices, and plot the result
normalized[tickers].sub(normalized['SP500'], axis = 0).plot()
plt.show()

# Convert monthly to weekly data
# Set start and end dates
start = '2016-1-1'
end = '2016-2-29'

# Create monthly_dates here
monthly_dates = pd.date_range(start=start, end=end, freq='M')

# Create monthly here
monthly = pd.Series(data=[1,2], index=monthly_dates)
print(monthly)

# Create weekly_dates here
weekly_dates = pd.date_range(start=start, end=end, freq='W')

# Print monthly, reindexed using weekly_dates
print(monthly.reindex(weekly_dates))
print(monthly.reindex(weekly_dates, method='bfill'))
print(monthly.reindex(weekly_dates, method='ffill'))

# Create weekly from monthly data
# Import data here
data = pd.read_csv('unemployment.csv', parse_dates = ['date'], index_col = 'date')

# Show first five rows of weekly series
print(data.asfreq('W').head())

# Show first five rows of weekly series with bfill option
print(data.asfreq('W', method = 'bfill').head())

# Create weekly series with ffill option and show first five rows
weekly_ffill = data.asfreq('W', method = 'ffill')
print(weekly_ffill.head())

# Plot weekly_fill starting 2015 here 
weekly_ffill.loc['2015':].plot()
plt.show()

# Use interpolation to create weekly data
# Inspect data here
print(monthly.info())

# Create weekly dates
weekly_dates = pd.date_range(start = monthly.index.min(), end = monthly.index.max(), freq = 'W')

# Reindex monthly to weekly data
weekly = monthly.reindex(weekly_dates)

# Create ffill and interpolated columns
weekly['ffill'] = weekly.UNRATE.ffill()
weekly['interpolated'] = weekly.UNRATE.interpolate()

# Plot weekly
weekly.plot()
plt.show()

# Applying interpolate
# Import & inspect data here
data = pd.read_csv('debt_unemployment.csv', parse_dates = ['date'], index_col = 'date')
print(data.info())

# Interpolate and inspect here
interpolated = data.interpolate()
print(interpolated.info())

# Plot interpolated data here
interpolated.plot(secondary_y = 'Unemployment')
plt.show()

# Compare weekly, monthly, annual trends
# Import and inspect data here
ozone = pd.read_csv('ozone.csv', parse_dates = ['date'], index_col = 'date')
print(ozone.info())

# Calculate and plot the weekly average ozone trend
ozone.resample('W').mean().plot()
plt.show()

# Calculate and plot the monthly average ozone trend
ozone.resample('M').mean().plot()
plt.show()

# Calculate and plot the annual average ozone trend
ozone.resample('A').mean().plot()
plt.show()

# Compare monthly stocks prices
# Import and inspect data here
stocks = pd.read_csv('stocks.csv', parse_dates = ['date'], index_col = 'date')
print(stocks.info())

# Calculate and plot the monthly averages
monthly_average = stocks.resample('M').mean()
monthly_average.plot(subplots = True)
plt.show()

# Compare quarterly GDP growth rate and stock returns
# Import and inspect gdp_growth here
gdp_growth = pd.read_csv('gdp_growth.csv', parse_dates = ['date'], index_col  = 'date')
print(gdp_growth.info())

# Import and inspect djia here
djia = pd.read_csv('djia.csv', parse_dates = ['date'], index_col = 'date')
print(djia.info())

# Calculate djia quarterly returns here 
djia_quarterly = djia.resample('QS').first()
djia_quarterly_return = djia_quarterly.pct_change().mul(100)

# Concatenate, rename and plot djia_quarterly_return and gdp_growth here 
data = pd.concat([gdp_growth, djia_quarterly_return], axis = 1)
data.columns = ['gdp', 'djia']
data.plot()
plt.show()

# Visualize monthly mean, median and standard deviation of S&P500 returns
# Import data here
sp500 = pd.read_csv('sp500.csv', parse_dates = ['date'], index_col = 'date')

# Calculate daily returns here
daily_returns = pd.Series(sp500.squeeze()).pct_change()

# Resample and calculate statistics
stats = daily_returns.resample('M').agg(['mean', 'median', 'std'])

# Plot stats here
stats.plot()
plt.show()
